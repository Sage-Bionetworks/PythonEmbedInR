% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PythonPkgWrapperUtils.R
\name{generateRWrappers}
\alias{generateRWrappers}
\title{Generate R wrappers for Python classes and functions}
\usage{
generateRWrappers(pyPkg, module, setGenericCallback, modifyFunctions = NULL,
  modifyClasses = NULL, functionPrefix = NULL, pyObjectName = NULL,
  transformReturnObject = NULL, replaceParam = NULL)
}
\arguments{
\item{pyPkg}{the Python package name}

\item{module}{the Python module}

\item{setGenericCallback}{the callback to setGeneric defined in the target R package}

\item{modifyFunctions}{optional function to modify the returned functions}

\item{modifyClasses}{optional function to modify the returned classes}

\item{functionPrefix}{optional text to add to the name of the functions}

\item{pyObjectName}{optional singleton object in python}

\item{transformReturnObject}{optional function to change returned values in R}

\item{replaceParam}{optional function to replace a function param}
}
\description{
This function generate R wrappers for Python classes and functions
 in the given Python module
}
\details{
generateRdFiles and generateRWrappers should be called with similar
 params to ensure all R wrappers has sufficient documentation.
}
\note{
generateRWrappers should be called in .onLoad()
}
\examples{
\dontshow{
callback <- function(name, def) {
 setGeneric(name, def)
}
PythonEmbedInR::generateRWrappers(pyPkg = "pyPackageName",
 module = "aModuleInPyPackageName",
 setGenericCallback = callback)
}
}
