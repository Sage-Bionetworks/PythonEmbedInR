% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PythonPkgWrapperUtils.R
\name{generateRdFiles}
\alias{generateRdFiles}
\title{Generate .Rd files for Python classes and functions}
\usage{
generateRdFiles(srcRootDir, pyPkg, container, functionFilter = NULL,
  classFilter = NULL, functionPrefix = NULL, keepContent = FALSE,
  templateDir = NULL)
}
\arguments{
\item{srcRootDir}{The root directory under which another directory, \code{auto-man/} is created to hold
the output, Rd files.}

\item{pyPkg}{The Python package name}

\item{container}{The fully qualified name of a Python module, or a Python class to be wrapped}

\item{functionFilter}{Optional function to intercept and modify the auto-generated function metadata.}

\item{classFilter}{Optional function to intercept and modify the auto-generated class metadata.}

\item{functionPrefix}{Optional text to add to the name of the wrapped functions.}

\item{keepContent}{Optional whether the existing files at the target directory should be kept.}

\item{templateDir}{Optional path to a template directory. Set \code{templateDir} to NULL to use the default
templates in the \code{/templates/} folder.}
}
\description{
This function generates .Rd files for Python classes and functions
in a given Python container
}
\details{
\itemize{
\item \code{container} can take the same value as \code{pyPkg}, can be a module or a class within the Python package.
\item \code{functionFilter} and \code{classFilter} are optional functions defined by the caller.
\item \code{functionFilter} takes as input the metadata for a generated function and either modifies it
or returns NULL to omit it from the set of generated functions. The metadata object is a list
having fields:\preformatted{'name': character
'args': named list having fields:
    'args': a list of the argument names (it may contain nested lists)
    'varargs':  character
    'keywords': character
    'defaults': character
'doc': character
'module':character
}

See example 2.
\item \code{classFilter} takes as input the metadata for a generated class and either modifies it
or returns NULL to omit it from the set of generated classes The metadata object is a list
having fields:\preformatted{'name': character
'constructorArgs': named list having fields:
    'args': a list of the argument names (it may contain nested lists)
    'varargs':  character
    'keywords': character
    'defaults': character
'doc': character
'methods':named list having fields:
    'name': character
    'doc': character
    'args': named list having fields:
        'args': a list of the argument names (it may contain nested lists)
        'varargs':  character
        'keywords': character
        'defaults': character
}

See example 3.
}
}
\note{
Python documentation may contains key words and terms that are only meaningful to Python users.
The generated .Rd files, localed in 'srcRootDir/auto-man', do not auto correct these terms, nor provide
examples in R. One must copy all auto-generated .Rd files to their package \code{/man} folder and make sure
that the language being used in these documents are friendly to R users.
}
\examples{
1. Generate .Rd files for all functions and classes in "pyPackageName.aModuleInPyPackageName"
PythonEmbedInR::generateRdFiles(
  srcRootDir = "path/to/R/pkg",
  pyPkg = "pyPackageName",
  container = "pyPackageName.aModuleInPyPackageName")
  
2. Generate docs for the module "pyPackageName.aModuleInPyPackageName", omitting the function "myFun"
myfunctionFilter <- function(x) {
  if (any(x$name == "myFun")) NULL else x
}
PythonEmbedInR::generateRdFiles(
  srcRootDir = "path/to/R/pkg",
  pyPkg = "pyPackageName",
  container = "pyPackageName.aModuleInPyPackageName",
  functionFilter = myfunctionFilter)
  
3.Generate docs for the module "pyPackageName.aModuleInPyPackageName", omitting the "MyObj" constructor
myclassFilter <- function(x) {
  if (any(x$name == "MyObj")) NULL else x
}
PythonEmbedInR::generateRdFiles(
  srcRootDir = "path/to/R/pkg",
  pyPkg = "pyPackageName",
  container = "pyPackageName.aModuleInPyPackageName",
  classFilter = myclassFilter)
}
