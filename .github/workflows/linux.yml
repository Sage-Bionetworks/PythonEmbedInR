# PythonEmbedInR v2

name: build-linux

on:
  push:
    branches-ignore:
      'master'

jobs:
  build:

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-18.04]
        r: [3.5.3, 3.6.3, 4.0.0]

    steps:
      - name: checkout
        uses: actions/checkout@v2
  
      - name: set-R-env
        run: |
          PACKAGE_NAME=PythonEmbedInR
          PACKAGE_VERSION=1.2.3 # TODO
          echo "::set-env name=PACKAGE_NAME::$PACKAGE_NAME" 
          echo "::set-env name=PACKAGE_VERSION::$PACKAGE_VERSION"
          
          R_VERSION=${{matrix.r}}
          R_MAJOR_VERSION=$(echo $R_VERSION | cut -f1 -d".")
          echo "::set-env name=R_VERSION::$R_VERSION" 
          echo "::set-env name=R_MAJOR_VERSION::$R_MAJOR_VERSION"

          # repo package installs to this dir, if we compile from source we install there too for consistency
          R_DIR="/usr/lib/R"
          echo "::set-env name=R_DIR::$R_DIR" 
          echo "::set-env name=R::$R_DIR/bin/R"
      
          R_LIBS=${GITHUB_WORKSPACE}/R_LIBS
          mkdir -p $R_LIBS
          echo "::set-env name=R_LIBS::$R_LIBS" 

          PACKAGE_BUILD_DIR=${GITHUB_WORKSPACE}/build
          mkdir -p $PACKAGE_BUILD_DIR
          echo "::set-env name=PACKAGE_BUILD_DIR::$PACKAGE_BUILD_DIR"

      - name: add-ubuntu-R-repos
        run: |
          # cran35 repos also contain 3.6. will need to check back what they do w/ v4.
          echo "deb https://cloud.r-project.org/bin/linux/ubuntu bionic-cran35/" | sudo tee /etc/apt/sources.list.d/rcran.list >> /dev/null
          echo "deb-src https://cloud.r-project.org/bin/linux/ubuntu bionic-cran35/" | sudo tee -a /etc/apt/sources.list.d/rcran.list >> /dev/null
          sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9
          sudo apt-get update

      # much faster to install from packages if we can
      - name: install-R-from-package
        id: install-R-from-package
        run: |
          PKG_VERSION=$(apt-cache madison r-base | grep $R_VERSION | head -1 | cut -f2 -d"|" | xargs)

          if [ -n "${PKG_VERSION}" ]; then
            set +e
            sudo apt-get install -y r-base=$PKG_VERSION
            if [ $? -eq 0 ]; then
              INSTALLED=true
            else
              # the R ubuntus seem to often be corrupt with broken dependencies.
              # if so we'll try to handly it gracefully and compile from source (slow)
              INSTALLED=false
            fi
            set -e
          else
            INSTALLED=false
          fi

          echo "::set-output name=installed::$INSTALLED"

      # if the version is not available as a package we'll see if we can download and compile
      # it from source. this can be necessary on brand new versions which appear first as source.
      - name: install-R-from-source
        if: steps.install-R-from-package.outputs.installed != 'true'
        
        run: |
          # even if the version didn't exist we'll use whatever version
          # is available to install it's dependencies (and hope that they haven't changed in the desired version).
          sudo apt-get build-dep -y r-base

          R_SOURCE_FILE="R-${R_VERSION}.tar.gz"
          SOURCE_URL="https://cran.r-project.org/src/base/R-${R_MAJOR_VERSION}/${R_SOURCE_FILE}"
          wget $SOURCE_URL

          tar zxvf $R_SOURCE_FILE
          pushd R-${R_VERSION}

          sudo mkdir -p $R_DIR
          ./configure --prefix=$R_DIR --enable-R-shlib
          make
          sudo make install
          popd

      - name: install-R-lib-deps
        run: |
          echo "list.of.packages <- c('pack', 'R6', 'testthat', 'rjson', 'rlang');" >> installReqPkgs.R
          echo "if(length(list.of.packages)) install.packages(list.of.packages, repos='http://cran.fhcrc.org', destdir=\"${R_LIBS}\")" >> installReqPkgs.R
          $R --vanilla < installReqPkgs.R

      - name: build-package
        run: |
          $R CMD build ./
          $R CMD INSTALL ./ --library=$R_LIBS --no-test-load
          
          ls *.tar.gz

      - name: run-tests
        run: |
          echo ".libPaths(c('$R_LIBS', .libPaths()));" > runTests.R
          echo "setwd(sprintf('%s/tests', getwd()));" >> runTests.R
          echo "source('testthat.R')" >> runTests.R
          echo "library(PythonEmbedInR);" >> runTests.R
          echo "detach(\"package:PythonEmbedInR\", unload=TRUE);" >> runTests.R
          echo "library(PythonEmbedInR)" >> runTests.R
          $R --vanilla < runTests.R

