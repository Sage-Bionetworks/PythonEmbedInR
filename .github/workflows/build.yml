name: build-PythonEmbedInR

on:
  push:
    branches-ignore:
      'master'

jobs:
  build:

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-18.04, macos-10.15, windows-2019]
        r: [3.5.3, 3.6.3, 4.0.0]

    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: shared-env
        shell: bash
        run: |
          PACKAGE_NAME=PythonEmbedInR
          echo "::set-env name=PACKAGE_NAME::$PACKAGE_NAME" 

          PACKAGE_VERSION=$(grep "Version: " DESCRIPTION | awk '{print $2'})

          # if this looks like a version e.g. v1.2.3 then
          # we use that to generate our package artifact
          # treat last part of ref splitting on / as branch
          BRANCH=${GITHUB_REF##*/}

          if [[ $BRANCH =~ ^v([[:digit:]\.]+)(-rc)? ]]; then
            BRANCH_VERSION="${BASH_REMATCH[1]}.${GITHUB_RUN_NUMBER}"

            if [[ -n "$BRANCH_VERSION" ]]; then
              # a version defined in the branch overrides the package version
              # for purposes of creating artifacts
              PACKAGE_VERSION=$BRANCH_VERSION

              DATE=`date +%Y-%m-%d`
              # replace DESCRIPTION with $VERSION & $DATE
              # sed -i not portable on OSX so we wash through some temp files
              sed "s|^Version: .*$|Version: $PACKAGE_VERSION|g" DESCRIPTION > DESCRIPTION.temp
              sed "s|^Date: .*$|Date: $DATE|g" DESCRIPTION.temp > DESCRIPTION2.temp

              rm DESCRIPTION
              mv DESCRIPTION2.temp DESCRIPTION
              rm DESCRIPTION.temp
            fi
          fi

          echo "::set-env name=BRANCH_VERSION::$BRANCH_VERSION"
          echo "::set-env name=PACKAGE_VERSION::$PACKAGE_VERSION"

          R_VERSION=${{matrix.r}}
          R_MAJOR_VERSION=$(echo $R_VERSION | cut -f1 -d".")
          echo "::set-env name=R_VERSION::$R_VERSION" 
          echo "::set-env name=R_MAJOR_VERSION::$R_MAJOR_VERSION"

      - name: linux-env
        if: runner.os == 'Linux'
        run: |
          # repo package installs to this dir, if we compile from source we install there too for consistency
          R_DIR="/usr/lib/R"
          echo "::set-env name=R_DIR::$R_DIR" 
          echo "::set-env name=R::$R_DIR/bin/R"

          R_LIBS=${GITHUB_WORKSPACE}/R_LIBS
          mkdir -p $R_LIBS
          echo "::set-env name=R_LIBS::$R_LIBS"

      - name: linux-add-ubuntu-R-repos
        if: runner.os == 'Linux'
        run: |
          if [[ "$R_MAJOR_VERSION" == "4" ]]; then
            CRAN_VERSION="40"
          else
            # 3.5 and 3.6 both use "35" repos...
            CRAN_VERSION="35"
          fi

          echo "deb https://cloud.r-project.org/bin/linux/ubuntu bionic-cran${CRAN_VERSION}/" | sudo tee /etc/apt/sources.list.d/rcran.list >> /dev/null
          echo "deb-src https://cloud.r-project.org/bin/linux/ubuntu bionic-cran${CRAN_VERSION}/" | sudo tee -a /etc/apt/sources.list.d/rcran.list >> /dev/null
          sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9

      # much faster to install from packages if we can
      - name: linux-install-R-from-package
        id: linux-install-R-from-package
        if: runner.os == 'Linux'
        run: |
          # the R ubuntu CRAN repos seem to often be corrupt with broken dependencies.
          # if they return any error we'll try to handle it gracefully by compiling from source instead (slow)
          set +e

          sudo apt-get update

          INSTALLED=false
          PKG_VERSION=$(apt-cache madison r-base | grep $R_VERSION | head -1 | cut -f2 -d"|" | xargs)
          if [ -n "${PKG_VERSION}" ]; then
            sudo apt-get install -y r-base=$PKG_VERSION
            if [ $? -eq 0 ]; then
              INSTALLED=true
            fi
          fi

          set -e
          echo "::set-output name=installed::$INSTALLED"

      # if the version is not available as a package or the R binary repos aren't operating properly (seems to be often)
      # we'll see if we can download and compile it from source. this can be necessary on brand new versions
      # which appear first as source.
      - name: linux-install-R-from-source
        if: runner.os == 'Linux' && steps.linux-install-R-from-package.outputs.installed != 'true'
        run: |
          # install all the build dependencies necessary to compile R from source.
          # this list is generated by 'apt-get build-dep r-base'
          sudo apt-get install -y autoconf \
            automake \
            autopoint \
            autotools-dev \
            bash-completion \
            bison \
            bsdmainutils \
            build-essential \
            ca-certificates-java \
            debhelper \
            default-jdk \
            default-jdk-headless \
            default-jre \
            default-jre-headless \
            dh-autoreconf \
            dh-strip-nondeterminism \
            dpkg-dev \
            fontconfig \
            fontconfig-config \
            fonts-dejavu-core \
            fonts-lmodern \
            g++ \
            g++-7 \
            gettext \
            gettext-base \
            gfortran \
            gfortran-7 \
            gir1.2-freedesktop \
            gir1.2-harfbuzz-0.0 \
            gir1.2-pango-1.0 \
            groff-base \
            icu-devtools \
            intltool-debian \
            java-common \
            libarchive-zip-perl \
            libasound2 \
            libasound2-data \
            libavahi-client3 \
            libavahi-common-data \
            libavahi-common3 \
            libbison-dev \
            libblas-dev \
            libblas3 \
            libbz2-dev \
            libcairo-gobject2 \
            libcairo-script-interpreter2 \
            libcairo2 \
            libcairo2-dev \
            libcroco3 \
            libcups2 \
            libcupsimage2 \
            libcurl4-openssl-dev \
            libdatrie1 \
            libdpkg-perl \
            libdrm-amdgpu1 \
            libdrm-common \
            libdrm-intel1 \
            libdrm-nouveau2 \
            libdrm-radeon1 \
            libdrm2 \
            libelf1 \
            libexpat1-dev \
            libfile-stripnondeterminism-perl \
            libfontconfig1 \
            libfontconfig1-dev \
            libfontenc1 \
            libfreetype6 \
            libfreetype6-dev \
            libgfortran-7-dev \
            libgfortran4 \
            libgif7 \
            libgl1 \
            libgl1-mesa-dri \
            libglapi-mesa \
            libglib2.0-bin \
            libglib2.0-dev \
            libglib2.0-dev-bin \
            libglvnd0 \
            libglx-mesa0 \
            libglx0 \
            libgraphite2-3 \
            libgraphite2-dev \
            libgs9 \
            libgs9-common \
            libharfbuzz-dev \
            libharfbuzz-gobject0 \
            libharfbuzz-icu0 \
            libharfbuzz0b \
            libice-dev \
            libice6 \
            libicu-dev \
            libicu-le-hb-dev \
            libicu-le-hb0 \
            libiculx60 \
            libidn11 \
            libijs-0.35 \
            libjbig-dev \
            libjbig0 \
            libjbig2dec0 \
            libjpeg-dev \
            libjpeg-turbo8 \
            libjpeg-turbo8-dev \
            libjpeg8 \
            libjpeg8-dev \
            libkpathsea6 \
            liblapack-dev \
            liblapack3 \
            liblcms2-2 \
            libllvm9 \
            liblzma-dev \
            liblzo2-2 \
            libmime-charset-perl \
            libncurses5-dev \
            libnspr4 \
            libnss3 \
            libpango-1.0-0 \
            libpango1.0-dev \
            libpangocairo-1.0-0 \
            libpangoft2-1.0-0 \
            libpangoxft-1.0-0 \
            libpaper-utils \
            libpaper1 \
            libpciaccess0 \
            libpcre16-3 \
            libpcre2-16-0 \
            libpcre2-32-0 \
            libpcre2-8-0 \
            libpcre2-dev \
            libpcre2-posix2 \
            libpcre3-dev \
            libpcre32-3 \
            libpcrecpp0v5 \
            libpcsclite1 \
            libpipeline1 \
            libpixman-1-0 \
            libpixman-1-dev \
            libpng-dev \
            libpng16-16 \
            libpoppler73 \
            libpotrace0 \
            libptexenc1 \
            libpthread-stubs0-dev \
            libpython-stdlib \
            libpython2.7-minimal \
            libpython2.7-stdlib \
            libreadline-dev \
            libsensors4 \
            libsigsegv2 \
            libsm-dev \
            libsm6 \
            libsombok3 \
            libstdc++-7-dev \
            libsynctex1 \
            libtcl8.6 \
            libtexlua52 \
            libtexluajit2 \
            libtext-unidecode-perl \
            libthai-data \
            libthai0 \
            libtiff5 \
            libtiff5-dev \
            libtiffxx5 \
            libtimedate-perl \
            libtinfo-dev \
            libtk8.6 \
            libtool \
            libunicode-linebreak-perl \
            libx11-dev \
            libx11-xcb1 \
            libxau-dev \
            libxaw7 \
            libxcb-dri2-0 \
            libxcb-dri3-0 \
            libxcb-glx0 \
            libxcb-present0 \
            libxcb-render0 \
            libxcb-render0-dev \
            libxcb-shm0 \
            libxcb-shm0-dev \
            libxcb-sync1 \
            libxcb1-dev \
            libxdamage1 \
            libxdmcp-dev \
            libxext-dev \
            libxfixes3 \
            libxfont2 \
            libxft-dev \
            libxft2 \
            libxi6 \
            libxkbfile1 \
            libxml-libxml-perl \
            libxml-namespacesupport-perl \
            libxml-sax-base-perl \
            libxml-sax-perl \
            libxmu6 \
            libxpm4 \
            libxrender1 \
            libxshmfence1 \
            libxss-dev \
            libxss1 \
            libxt-dev \
            libxt6 \
            libxtst6 \
            libxxf86vm1 \
            libzzip-0-13 \
            m4 \
            make \
            man-db \
            mpack \
            openjdk-11-jdk \
            openjdk-11-jdk-headless \
            openjdk-11-jre \
            openjdk-11-jre-headless \
            pkg-config \
            po-debconf \
            poppler-data \
            preview-latex-style \
            python \
            python-minimal \
            python2.7 \
            python2.7-minimal \
            python3-distutils \
            python3-lib2to3 \
            t1utils \
            tcl \
            tcl-dev \
            tcl8.6 \
            tcl8.6-dev \
            tex-common \
            texinfo \
            texlive-base \
            texlive-binaries \
            texlive-extra-utils \
            texlive-fonts-extra \
            texlive-fonts-recommended \
            texlive-latex-base \
            texlive-latex-extra \
            texlive-latex-recommended \
            texlive-pictures \
            texlive-plain-generic \
            tk \
            tk-dev \
            tk8.6 \
            tk8.6-dev \
            tzdata \
            x11-common \
            x11-xkb-utils \
            x11proto-core-dev \
            x11proto-dev \
            x11proto-scrnsaver-dev \
            x11proto-xext-dev \
            xdg-utils \
            xfonts-base \
            xfonts-encodings \
            xfonts-utils \
            xkb-data \
            xorg-sgml-doctools \
            xserver-common \
            xtrans-dev \
            xvfb \
            zlib1g-dev

          R_SOURCE_FILE="R-${R_VERSION}.tar.gz"
          SOURCE_URL="https://cran.r-project.org/src/base/R-${R_MAJOR_VERSION}/${R_SOURCE_FILE}"
          wget $SOURCE_URL

          tar zxvf $R_SOURCE_FILE
          pushd R-${R_VERSION}

          sudo mkdir -p $R_DIR
          ./configure --prefix=$R_DIR --enable-R-shlib
          make
          sudo make install
          popd

      - name: mac-env
        if: runner.os == 'macOS'
        run: |
          R_LIBS=${GITHUB_WORKSPACE}/R_LIBS
          mkdir -p $R_LIBS
          echo "::set-env name=R_LIBS::$R_LIBS"
          echo "::set-env name=R::R"

      - name: mac-install-R
        if: runner.os == 'macOS'
        run: |
          R_INSTALLER_FILE="R-${R_VERSION}.pkg"
          R_INSTALLER_URL="https://cloud.r-project.org/bin/macosx/${R_INSTALLER_FILE}"

          wget $R_INSTALLER_URL
          sudo installer -pkg $R_INSTALLER_FILE -target /

      - name: windows-env
        if: runner.os == 'Windows'
        shell: bash
        run: |
          # forward slashes easier to work with than double backslashes on windows...
          R_LIBS=$(echo $GITHUB_WORKSPACE | sed 's/\\/\//g')/R_LIBS
          mkdir -p $R_LIBS
          echo "::set-env name=R_LIBS::$R_LIBS"

          R_DIR="C:/R/R-${R_VERSION}"
          R="$R_DIR/bin/R"
          echo "::set-env name=R_DIR::$R_DIR"
          echo "::set-env name=R::$R"

          echo "::set-env name=TZ::UTC"

      - name: windows-install-R
        if: runner.os == 'Windows'
        shell: bash
        run: |
          R_INSTALLER_FILE="R-${R_VERSION}-win.exe"

          # conveniently even the current version is available under "old"
          R_INSTALLER_URL="https://cloud.r-project.org/bin/windows/base/old/${R_VERSION}/${R_INSTALLER_FILE}"

          # github windows bash uses git-bash, wget not available
          curl -O $R_INSTALLER_URL

          if [ "$R_MAJOR_VERSION" == "4" ]
          then
            R_TOOLS_FILE="rtools40-x86_64.exe"
            R_TOOLS_BIN="c:/rtools40/usr/bin"
          else
            # assume 3
            R_TOOLS_FILE="Rtools35.exe"
            R_TOOLS_BIN="c:/Rtools/bin"
          fi

          # github windows bash uses git-bash, wget not available
          curl -O "https://cran.r-project.org/bin/windows/Rtools/${R_TOOLS_FILE}"

          echo "::set-env name=R_INSTALLER_FILE::$R_INSTALLER_FILE"
          echo "::set-env name=R_TOOLS_FILE::$R_TOOLS_FILE"
          echo "::add-path::$R_TOOLS_BIN"

      # installers are normally interactive, the /VERYSILENT flag will install non-interactive
      # but is asynchronous so we use "start /wait" but that seems to be incompatible
      # with the bash shell used here so we run these commands under a windows cmd shell.
      - name: windows-install-R-cmd
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          start /wait %R_INSTALLER_FILE% /VERYSILENT /DIR="%R_DIR%"
          start /wait %R_TOOLS_FILE% /VERYSILENT

      - name: install-R-lib-deps
        shell: bash
        run: |
          echo "list.of.packages <- c('pack', 'R6', 'testthat', 'rjson', 'rlang');" >> installReqPkgs.R
          echo "if(length(list.of.packages)) install.packages(list.of.packages, repos='http://cran.fhcrc.org', destdir=\"${R_LIBS}\")" >> installReqPkgs.R
          $R --vanilla < installReqPkgs.R

      - name: linux-build-package
        if: runner.os == 'Linux'
        run: |
          $R CMD build ./
          $R CMD INSTALL ./ --library=$R_LIBS --no-test-load

          echo "::set-env name=ARTIFACT_EXTENSION::tar.gz"

      - name: mac-build-package
        if: runner.os == 'macOS'
        run: |
            # need some additional headers (zlib) on catalina to compile python
            # https://stackoverflow.com/a/58349403
            for HEADER_PATH in /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/*
            do
              INCLUDE_PATH="/usr/local/include/$(basename $HEADER_PATH)"
              if [ ! -f $INCLUDE_PATH ]; then
                sudo ln -s $HEADER_PATH $INCLUDE_PATH 
              fi
            done
            
            R CMD build ./

            sudo R CMD INSTALL --build ${PACKAGE_NAME}_${PACKAGE_VERSION}.tar.gz --library=$R_LIBS --no-test-load

            ## Now fix the binaries, per SYNR-341:
            # it's v 3.0 or greater, with just one platform
            mkdir -p ${PACKAGE_NAME}/libs
            cp $R_LIBS/${PACKAGE_NAME}/libs/PythonEmbedInR.so ${PACKAGE_NAME}/libs
            install_name_tool -change "/Library/Frameworks/R.framework/Versions/${R_VERSION}/Resources/lib/libR.dylib"  "/Library/Frameworks/R.framework/Versions/Current/Resources/lib/libR.dylib" ${PACKAGE_NAME}/libs/PythonEmbedInR.so

            # update archive with modified binaries
            for f in *.tgz
            do
              prefix="${f%.*}"
              gunzip "$f"
              # Note, >=3.0 there is only one platform
              tar -rf "$prefix".tar ${PACKAGE_NAME}/libs/PythonEmbedInR.so
              rm "$prefix".tar.gz
              gzip "$prefix".tar
              mv "$prefix".tar.gz "$prefix".tgz
            done

            echo "::set-env name=ARTIFACT_EXTENSION::tgz"

      - name: windows-build-package
        if: runner.os == 'Windows'
        shell: bash
        run: |
          $R CMD build ./
          $R CMD INSTALL --build ${PACKAGE_NAME}_${PACKAGE_VERSION}.tar.gz --library=$R_LIBS --no-test-load --merge-multiarch

          echo "::set-env name=ARTIFACT_EXTENSION::zip"

      - name: run-tests
        shell: bash
        run: |
          echo ".libPaths(c('$R_LIBS', .libPaths()));" > runTests.R
          echo "setwd(sprintf('%s/tests', getwd()));" >> runTests.R
          echo "source('testthat.R')" >> runTests.R
          echo "library(PythonEmbedInR);" >> runTests.R
          echo "detach(\"package:PythonEmbedInR\", unload=TRUE);" >> runTests.R
          echo "library(PythonEmbedInR)" >> runTests.R
          $R --vanilla < runTests.R

      - name: artifact-name
        shell: bash
        run: |
          ARTIFACT_NAME="${PACKAGE_NAME}_${PACKAGE_VERSION}.${ARTIFACT_EXTENSION}"
          UPLOAD_NAME=$(echo ${{runner.os}} | tr '[:upper:]' '[:lower:]')_${R_VERSION}_${PACKAGE_NAME}_${PACKAGE_VERSION}
          echo "::set-env name=ARTIFACT_NAME::$ARTIFACT_NAME"
          echo "::set-env name=UPLOAD_NAME::$UPLOAD_NAME"

      - name: upload-artifact
        uses: actions/upload-artifact@v1
        with:
          name: ${{env.UPLOAD_NAME}}
          path: ${{env.ARTIFACT_NAME}}

