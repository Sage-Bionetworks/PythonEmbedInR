# PythonEmbedInR v2

name: build-linux

on:
  push:
    branches-ignore:
      'master'

jobs:
  build:

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-18.04, macos-10.15, windows-2019]
        r: [4.0.0]

    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: shared-env
        shell: bash
        run: |
          PACKAGE_NAME=PythonEmbedInR
          echo "::set-env name=PACKAGE_NAME::$PACKAGE_NAME" 

          PACKAGE_VERSION=$(grep "Version: " DESCRIPTION | awk '{print $2'})

          # if this looks like a version e.g. v1.2.3 then
          # we use that to generate our package artifact
          # treat last part of ref splitting on / as branch
          BRANCH=${GITHUB_REF##*/}

          if [[ $BRANCH =~ ^v([[:digit:]\.]+)(-rc)? ]]; then
            BRANCH_VERSION=${BASH_REMATCH[1]}

            if [[ -n "$BRANCH_VERSION" ]]; then
              # a version defined in the branch overrides the package version
              # for purposes of creating artifacts
              PACKAGE_VERSION=$BRANCH_VERSION

              DATE=`date +%Y-%m-%d`
              # replace DESCRIPTION with $VERSION & $DATE
              # sed -i not portable on OSX so we wash through some temp files
              sed "s|^Version: .*$|Version: $PACKAGE_VERSION|g" DESCRIPTION > DESCRIPTION.temp
              sed "s|^Date: .*$|Date: $DATE|g" DESCRIPTION.temp > DESCRIPTION2.temp

              rm DESCRIPTION
              mv DESCRIPTION2.temp DESCRIPTION
              rm DESCRIPTION.temp
            fi
          fi

          echo "::set-env name=BRANCH_VERSION::$BRANCH_VERSION"
          echo "::set-env name=PACKAGE_VERSION::$PACKAGE_VERSION"

          R_VERSION=${{matrix.r}}
          R_MAJOR_VERSION=$(echo $R_VERSION | cut -f1 -d".")
          echo "::set-env name=R_VERSION::$R_VERSION" 
          echo "::set-env name=R_MAJOR_VERSION::$R_MAJOR_VERSION"

############################
# start Linux specific steps

      - name: linux-env
        if: runner.os == 'Linux'
        run: |
          # repo package installs to this dir, if we compile from source we install there too for consistency
          R_DIR="/usr/lib/R"
          echo "::set-env name=R_DIR::$R_DIR" 
          echo "::set-env name=R::$R_DIR/bin/R"

          R_LIBS=${GITHUB_WORKSPACE}/R_LIBS
          mkdir -p $R_LIBS
          echo "::set-env name=R_LIBS::$R_LIBS" 

      - name: linux-add-ubuntu-R-repos
        if: runner.os == 'Linux'
        run: |
          if [[ "$R_MAJOR_VERSION" == "4" ]]; then
            CRAN_VERSION="40"
          else
            # 3.5 and 3.6 both use "35" repos...
            CRAN_VERSON="35"
          fi

          echo "deb https://cloud.r-project.org/bin/linux/ubuntu bionic-cran${CRAN_VERSION}/" | sudo tee /etc/apt/sources.list.d/rcran.list >> /dev/null
          echo "deb-src https://cloud.r-project.org/bin/linux/ubuntu bionic-cran${CRAN_VERSION}/" | sudo tee -a /etc/apt/sources.list.d/rcran.list >> /dev/null
          sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9

      # much faster to install from packages if we can
      - name: linux-install-R-from-package
        id: linux-install-R-from-package
        if: runner.os == 'Linux'
        run: |
          # the R ubuntu CRAN repos seem to often be corrupt with broken dependencies.
          # if they return any error we'll try to handle it gracefully by compiling from source instead (slow)
          set +e

          # TODO restore valid check once CRAN is stable again...
          sudo apt-get -o Acquire::Check-Valid-Until=false update

          INSTALLED=false
          PKG_VERSION=$(apt-cache madison r-base | grep $R_VERSION | head -1 | cut -f2 -d"|" | xargs)
          if [ -n "${PKG_VERSION}" ]; then
            sudo apt-get install -y r-base=$PKG_VERSION
            if [ $? -eq 0 ]; then
              INSTALLED=true
            fi
          fi

          set -e
          echo "::set-output name=installed::$INSTALLED"

      # if the version is not available as a package we'll see if we can download and compile
      # it from source. this can be necessary on brand new versions which appear first as source.
      - name: linux-install-R-from-source
        if: runner.os == 'Linux' && steps.linux-install-R-from-package.outputs.installed != 'true'
        run: |
          # even if the version didn't exist we'll use whatever version
          # is available to install it's dependencies (and hope that they haven't changed in the desired version).
          sudo apt-get build-dep -y r-base

          R_SOURCE_FILE="R-${R_VERSION}.tar.gz"
          SOURCE_URL="https://cran.r-project.org/src/base/R-${R_MAJOR_VERSION}/${R_SOURCE_FILE}"
          wget $SOURCE_URL

          tar zxvf $R_SOURCE_FILE
          pushd R-${R_VERSION}

          sudo mkdir -p $R_DIR
          ./configure --prefix=$R_DIR --enable-R-shlib
          make
          sudo make install
          popd

      - name: linux-install-R-lib-deps
        if: runner.os == 'Linux'
        run: |
          echo "list.of.packages <- c('pack', 'R6', 'testthat', 'rjson', 'rlang');" >> installReqPkgs.R
          echo "if(length(list.of.packages)) install.packages(list.of.packages, repos='http://cran.fhcrc.org', destdir=\"${R_LIBS}\")" >> installReqPkgs.R
          $R --vanilla < installReqPkgs.R

      - name: linux-build-package
        if: runner.os == 'Linux'
        run: |
          $R CMD build ./
          $R CMD INSTALL ./ --library=$R_LIBS --no-test-load

# end Linux specific steps
##########################
# begin Mac specific steps

      - name: mac-env
        if: runner.os == 'macOS'
        run: |
          R_LIBS=${GITHUB_WORKSPACE}/R_LIBS
          mkdir -p $R_LIBS
          echo "::set-env name=R_LIBS::$R_LIBS" 

      - name: mac-install-R
        if: runner.os == 'macOS'
        run: |
          R_INSTALLER_FILE="R-${R_VERSION}.pkg"
          R_INSTALLER_URL="https://cloud.r-project.org/bin/macosx/${R_INSTALLER_FILE}"

          wget $R_INSTALLER_URL
          sudo installer -pkg $R_INSTALLER_FILE -target /

      - name: mac-install-R-lib-deps
        if: runner.os == 'macOS'
        run: |
          echo "list.of.packages <- c('pack', 'R6', 'testthat', 'rjson', 'rlang');" >> installReqPkgs.R
          echo "if(length(list.of.packages)) install.packages(list.of.packages, repos='http://cran.fhcrc.org', destdir=\"${R_LIBS}\")" >> installReqPkgs.R
          R --vanilla < installReqPkgs.R

      - name: mac-build-package
        if: runner.os == 'macOS'
        run: |
            # need some additional headers (zlib) on catalina to compile python
            # https://stackoverflow.com/a/58349403
            for HEADER_PATH in /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/*
            do
              INCLUDE_PATH="/usr/local/include/$(basename $HEADER_PATH)"
              if [ ! -f $INCLUDE_PATH ]; then
                sudo ln -s $HEADER_PATH $INCLUDE_PATH 
              fi
            done
            
            R CMD build ./

            sudo R CMD INSTALL --build ${PACKAGE_NAME}_${PACKAGE_VERSION}.tar.gz --library=$R_LIBS --no-test-load
            
            ## Now fix the binaries, per SYNR-341:
            # it's v 3.0 or greater, with just one platform
            mkdir -p ${PACKAGE_NAME}/libs
            cp $R_LIBS/${PACKAGE_NAME}/libs/PythonEmbedInR.so ${PACKAGE_NAME}/libs
            install_name_tool -change "/Library/Frameworks/R.framework/Versions/${R_VERSION}/Resources/lib/libR.dylib"  "/Library/Frameworks/R.framework/Versions/Current/Resources/lib/libR.dylib" ${PACKAGE_NAME}/libs/PythonEmbedInR.so

            # update archive with modified binaries
            for f in *.tgz
            do
              prefix="${f%.*}"
              gunzip "$f"
              # Note, >=3.0 there is only one platform
              tar -rf "$prefix".tar ${PACKAGE_NAME}/libs/PythonEmbedInR.so
              rm "$prefix".tar.gz
              gzip "$prefix".tar
              mv "$prefix".tar.gz "$prefix".tgz
            done

# end Mac specific steps
##############################
# begin windows specific steps
#
      - name: windows-env
        if: runner.os == 'Windows'
        shell: bash
        run: |
          # forward slashes easier to work with than double backslashes on windows...
          R_LIBS=$(echo $GITHUB_WORKSPACE | sed 's/\\/\//g')/R_LIBS
          mkdir -p $R_LIBS
          echo "::set-env name=R_LIBS::$R_LIBS"

          R_DIR="C:/R/R-${R_VERSION}"
          R="$R_DIR/bin/R"
          echo "::set-env name=R_DIR::$R_DIR"
          echo "::set-env name=R::$R"

          echo "::set-env name=TZ::UTC"

      - name: windows-install-R
        if: runner.os == 'Windows'
        shell: bash
        run: |
          R_INSTALLER_FILE="R-${R_VERSION}-win.exe"

          # conveniently even the current version is available under "old"
          R_INSTALLER_URL="https://cloud.r-project.org/bin/windows/base/old/${R_VERSION}/${R_INSTALLER_FILE}"

          # github windows bash uses git-bash, wget not available
          curl -O $R_INSTALLER_URL

          # headless install
          start /wait $R_INSTALLER_FILE /VERYSILENT /DIR="$R_DIR" 

          if [ "$R_MAJOR_VERSION" == "4" ]
          then
            R_TOOLS_FILE="rtools40-x86_64.exe"         
          else
            # assume 3
            R_TOOLS_FILE="Rtools35.exe"
          fi
          
          # github windows bash uses git-bash, wget not available
          curl -O "https://cran.r-project.org/bin/windows/Rtools/${R_TOOLS_FILE}"
          
          echo "::set-env name=R_INSTALLER_FILE::$R_INSTALLER_FILE"
          echo "::set-env name=R_TOOLS_FILE::$R_TOOLS_FILE"

      # installers are normally interactive, the /VERYSILENT flag will install non-interactive
      # but is asynchronous so we use "start /wait" but that seems to be incompatible
      # with the bash shell used here so we run these commands under a windows cmd shell.
      - name: windows-install-R-cmd
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          start /wait %R_INSTALLER_FILE% /VERYSILENT /DIR="%R_DIR%"
          start /wait %R_TOOLS_FILE% /VERYSILENT

      - name: windows-install-R-lib-deps
        if: runner.os == 'Windows'
        shell: bash
        run: |
          echo "list.of.packages <- c('pack', 'R6', 'testthat', 'rjson', 'rlang');" >> installReqPkgs.R
          echo "if(length(list.of.packages)) install.packages(list.of.packages, repos='http://cran.fhcrc.org', destdir=\"${R_LIBS}\")" >> installReqPkgs.R
          $R --vanilla < installReqPkgs.R

      - name: windows-build-package
        if: runner.os == 'Windows'
        shell: bash
        run: |
          $R CMD build ./
          $R CMD INSTALL --build ${PACKAGE_NAME}_${PACKAGE_VERSION}.tar.gz --library=$R_LIBS --no-test-load --merge-multiarch

# end Windows specific steps
############################

      - name: run-tests
        shell: bash
        run: |
          echo ".libPaths(c('$R_LIBS', .libPaths()));" > runTests.R
          echo "setwd(sprintf('%s/tests', getwd()));" >> runTests.R
          echo "source('testthat.R')" >> runTests.R
          echo "library(PythonEmbedInR);" >> runTests.R
          echo "detach(\"package:PythonEmbedInR\", unload=TRUE);" >> runTests.R
          echo "library(PythonEmbedInR)" >> runTests.R
          $R --vanilla < runTests.R

